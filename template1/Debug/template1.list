
template1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f68  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080021a0  080021a0  000031a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080021f0  080021f0  000031f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080021f4  080021f4  000031f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  080021f8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08002201  0000400c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000002c  08002201  0000402c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY
  9 .debug_info   000082c4  00000000  00000000  0000403f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000160e  00000000  00000000  0000c303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000900  00000000  00000000  0000d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000006ac  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002fb85  00000000  00000000  0000e8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000a08d  00000000  00000000  0003e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012bc01  00000000  00000000  000484d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001740d7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002314  00000000  00000000  0017411c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  00176430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08002188 	.word	0x08002188

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08002188 	.word	0x08002188

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 f966 	bl	800054c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000280:	f000 f878 	bl	8000374 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f806 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f894 	bl	80003b4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800028c:	f000 f87e 	bl	800038c <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <main+0x18>

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b09e      	sub	sp, #120	@ 0x78
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2260      	movs	r2, #96	@ 0x60
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 ff44 	bl	8002130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]
 80002b6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 80002b8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80002bc:	f000 fbb4 	bl	8000a28 <HAL_PWREx_ControlVoltageScaling>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002c6:	f000 f88f 	bl	80003e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002ca:	f000 fb9d 	bl	8000a08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002ce:	4b28      	ldr	r3, [pc, #160]	@ (8000370 <SystemClock_Config+0xdc>)
 80002d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80002d4:	4a26      	ldr	r2, [pc, #152]	@ (8000370 <SystemClock_Config+0xdc>)
 80002d6:	f023 0318 	bic.w	r3, r3, #24
 80002da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002de:	2314      	movs	r3, #20
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002e2:	2381      	movs	r3, #129	@ 0x81
 80002e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	2302      	movs	r3, #2
 80002f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002f8:	2301      	movs	r3, #1
 80002fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000300:	2301      	movs	r3, #1
 8000302:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000304:	2330      	movs	r3, #48	@ 0x30
 8000306:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000308:	2302      	movs	r3, #2
 800030a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800030c:	2302      	movs	r3, #2
 800030e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000310:	2304      	movs	r3, #4
 8000312:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000314:	2300      	movs	r3, #0
 8000316:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fc5d 	bl	8000be0 <HAL_RCC_OscConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800032c:	f000 f85c 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	231f      	movs	r3, #31
 8000332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000334:	2303      	movs	r3, #3
 8000336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000348:	463b      	mov	r3, r7
 800034a:	2101      	movs	r1, #1
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fb23 	bl	8001998 <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000358:	f000 f846 	bl	80003e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLModeSelection(RCC_MSISPLL_MODE_SEL);
 800035c:	2040      	movs	r0, #64	@ 0x40
 800035e:	f001 feaf 	bl	80020c0 <HAL_RCCEx_EnableMSIPLLModeSelection>
  HAL_RCCEx_EnableMSIPLLMode();
 8000362:	f001 fed5 	bl	8002110 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000366:	bf00      	nop
 8000368:	3778      	adds	r7, #120	@ 0x78
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	46020c00 	.word	0x46020c00

08000374 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000378:	2002      	movs	r0, #2
 800037a:	f000 fbe1 	bl	8000b40 <HAL_PWREx_ConfigSupply>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000384:	f000 f830 	bl	80003e8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000390:	2000      	movs	r0, #0
 8000392:	f000 fb09 	bl	80009a8 <HAL_ICACHE_ConfigAssociativityMode>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800039c:	f000 f824 	bl	80003e8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003a0:	f000 fb22 	bl	80009e8 <HAL_ICACHE_Enable>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003aa:	f000 f81d 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ba:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <MX_GPIO_Init+0x30>)
 80003bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003c0:	4a08      	ldr	r2, [pc, #32]	@ (80003e4 <MX_GPIO_Init+0x30>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_GPIO_Init+0x30>)
 80003cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	46020c00 	.word	0x46020c00

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <HAL_MspInit+0x30>)
 80003fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000400:	4a08      	ldr	r2, [pc, #32]	@ (8000424 <HAL_MspInit+0x30>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <HAL_MspInit+0x30>)
 800040c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	46020c00 	.word	0x46020c00

08000428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <NMI_Handler+0x4>

08000430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <HardFault_Handler+0x4>

08000438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <MemManage_Handler+0x4>

08000440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <BusFault_Handler+0x4>

08000448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <UsageFault_Handler+0x4>

08000450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047e:	f000 f90b 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <SystemInit+0x68>)
 800048e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000492:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <SystemInit+0x68>)
 8000494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800049c:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <SystemInit+0x6c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80004a2:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <SystemInit+0x6c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80004a8:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <SystemInit+0x6c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <SystemInit+0x6c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <SystemInit+0x6c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <SystemInit+0x6c>)
 80004ba:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80004be:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80004c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <SystemInit+0x6c>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <SystemInit+0x6c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <SystemInit+0x6c>)
 80004d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80004d6:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <SystemInit+0x6c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <SystemInit+0x68>)
 80004de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80004e2:	609a      	str	r2, [r3, #8]
  #endif
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00
 80004f4:	46020c00 	.word	0x46020c00

080004f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80004f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000530 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004fc:	f7ff ffc4 	bl	8000488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000500:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000502:	e003      	b.n	800050c <LoopCopyDataInit>

08000504 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000504:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000506:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000508:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800050a:	3104      	adds	r1, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800050c:	480a      	ldr	r0, [pc, #40]	@ (8000538 <LoopForever+0xa>)
	ldr	r3, =_edata
 800050e:	4b0b      	ldr	r3, [pc, #44]	@ (800053c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000510:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000512:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000514:	d3f6      	bcc.n	8000504 <CopyDataInit>
	ldr	r2, =_sbss
 8000516:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000518:	e002      	b.n	8000520 <LoopFillZerobss>

0800051a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800051a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800051c:	f842 3b04 	str.w	r3, [r2], #4

08000520 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <LoopForever+0x16>)
	cmp	r2, r3
 8000522:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000524:	d3f9      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000526:	f001 fe0b 	bl	8002140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800052a:	f7ff fea5 	bl	8000278 <main>

0800052e <LoopForever>:

LoopForever:
    b LoopForever
 800052e:	e7fe      	b.n	800052e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000530:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000534:	080021f8 	.word	0x080021f8
	ldr	r0, =_sdata
 8000538:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800053c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000540:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000544:	2000002c 	.word	0x2000002c

08000548 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_IRQHandler>
	...

0800054c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_Init+0x50>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a11      	ldr	r2, [pc, #68]	@ (800059c <HAL_Init+0x50>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800055a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f94a 	bl	80007f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000562:	f001 fc0b 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8000566:	4602      	mov	r2, r0
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <HAL_Init+0x54>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	490c      	ldr	r1, [pc, #48]	@ (80005a4 <HAL_Init+0x58>)
 8000572:	5ccb      	ldrb	r3, [r1, r3]
 8000574:	fa22 f303 	lsr.w	r3, r2, r3
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <HAL_Init+0x5c>)
 800057a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800057c:	2004      	movs	r0, #4
 800057e:	f000 f981 	bl	8000884 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000582:	200f      	movs	r0, #15
 8000584:	f000 f812 	bl	80005ac <HAL_InitTick>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e002      	b.n	8000598 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000592:	f7ff ff2f 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40022000 	.word	0x40022000
 80005a0:	46020c00 	.word	0x46020c00
 80005a4:	080021a0 	.word	0x080021a0
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80005b8:	4b33      	ldr	r3, [pc, #204]	@ (8000688 <HAL_InitTick+0xdc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d101      	bne.n	80005c4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e05c      	b.n	800067e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80005c4:	4b31      	ldr	r3, [pc, #196]	@ (800068c <HAL_InitTick+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d10c      	bne.n	80005ea <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80005d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <HAL_InitTick+0xe4>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <HAL_InitTick+0xdc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e037      	b.n	800065a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80005ea:	f000 f9a3 	bl	8000934 <HAL_SYSTICK_GetCLKSourceConfig>
 80005ee:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d023      	beq.n	800063e <HAL_InitTick+0x92>
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d82d      	bhi.n	8000658 <HAL_InitTick+0xac>
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <HAL_InitTick+0x5e>
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00d      	beq.n	8000624 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000608:	e026      	b.n	8000658 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <HAL_InitTick+0xe4>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <HAL_InitTick+0xdc>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000618:	fbb3 f3f1 	udiv	r3, r3, r1
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	60fb      	str	r3, [r7, #12]
        break;
 8000622:	e01a      	b.n	800065a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000624:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <HAL_InitTick+0xdc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000632:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	60fb      	str	r3, [r7, #12]
        break;
 800063c:	e00d      	b.n	800065a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800063e:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <HAL_InitTick+0xdc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000648:	fbb3 f3f2 	udiv	r3, r3, r2
 800064c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	60fb      	str	r3, [r7, #12]
        break;
 8000656:	e000      	b.n	800065a <HAL_InitTick+0xae>
        break;
 8000658:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f000 f8f0 	bl	8000840 <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e009      	b.n	800067e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066a:	2200      	movs	r2, #0
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	f04f 30ff 	mov.w	r0, #4294967295
 8000672:	f000 f8cb 	bl	800080c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000676:	4a07      	ldr	r2, [pc, #28]	@ (8000694 <HAL_InitTick+0xe8>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008
 800068c:	e000e010 	.word	0xe000e010
 8000690:	20000000 	.word	0x20000000
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	@ (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000028 	.word	0x20000028

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db0a      	blt.n	8000766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	490c      	ldr	r1, [pc, #48]	@ (8000788 <__NVIC_SetPriority+0x4c>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	0112      	lsls	r2, r2, #4
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	440b      	add	r3, r1
 8000760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000764:	e00a      	b.n	800077c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	b2da      	uxtb	r2, r3
 800076a:	4908      	ldr	r1, [pc, #32]	@ (800078c <__NVIC_SetPriority+0x50>)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	3b04      	subs	r3, #4
 8000774:	0112      	lsls	r2, r2, #4
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	440b      	add	r3, r1
 800077a:	761a      	strb	r2, [r3, #24]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b480      	push	{r7}
 8000792:	b089      	sub	sp, #36	@ 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f1c3 0307 	rsb	r3, r3, #7
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	bf28      	it	cs
 80007ae:	2304      	movcs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3304      	adds	r3, #4
 80007b6:	2b06      	cmp	r3, #6
 80007b8:	d902      	bls.n	80007c0 <NVIC_EncodePriority+0x30>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3b03      	subs	r3, #3
 80007be:	e000      	b.n	80007c2 <NVIC_EncodePriority+0x32>
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c4:	f04f 32ff 	mov.w	r2, #4294967295
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	401a      	ands	r2, r3
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d8:	f04f 31ff 	mov.w	r1, #4294967295
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43d9      	mvns	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	4313      	orrs	r3, r2
         );
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3724      	adds	r7, #36	@ 0x24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ff6a 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800081a:	f7ff ff81 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800081e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	6978      	ldr	r0, [r7, #20]
 8000826:	f7ff ffb3 	bl	8000790 <NVIC_EncodePriority>
 800082a:	4602      	mov	r2, r0
 800082c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff82 	bl	800073c <__NVIC_SetPriority>
}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000850:	d301      	bcc.n	8000856 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000852:	2301      	movs	r3, #1
 8000854:	e00d      	b.n	8000872 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000856:	4a0a      	ldr	r2, [pc, #40]	@ (8000880 <HAL_SYSTICK_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_SYSTICK_Config+0x40>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_SYSTICK_Config+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <HAL_SYSTICK_Config+0x40>)
 800086a:	f043 0303 	orr.w	r3, r3, #3
 800086e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d844      	bhi.n	800091c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000892:	a201      	add	r2, pc, #4	@ (adr r2, 8000898 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008bb 	.word	0x080008bb
 800089c:	080008d9 	.word	0x080008d9
 80008a0:	080008fb 	.word	0x080008fb
 80008a4:	0800091d 	.word	0x0800091d
 80008a8:	080008ad 	.word	0x080008ad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6013      	str	r3, [r2, #0]
      break;
 80008b8:	e031      	b.n	800091e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1b      	ldr	r2, [pc, #108]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008c0:	f023 0304 	bic.w	r3, r3, #4
 80008c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	4a18      	ldr	r2, [pc, #96]	@ (8000930 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008ce:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80008d6:	e022      	b.n	800091e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a13      	ldr	r2, [pc, #76]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008de:	f023 0304 	bic.w	r3, r3, #4
 80008e2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ea:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80008ee:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80008f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80008f8:	e011      	b.n	800091e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000900:	f023 0304 	bic.w	r3, r3, #4
 8000904:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000910:	4a07      	ldr	r2, [pc, #28]	@ (8000930 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000912:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800091a:	e000      	b.n	800091e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800091c:	bf00      	nop
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e010 	.word	0xe000e010
 8000930:	46020c00 	.word	0x46020c00

08000934 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000946:	2304      	movs	r3, #4
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	e021      	b.n	8000990 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000956:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800095e:	d011      	beq.n	8000984 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000966:	d810      	bhi.n	800098a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d004      	beq.n	8000978 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000974:	d003      	beq.n	800097e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000976:	e008      	b.n	800098a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
        break;
 800097c:	e008      	b.n	8000990 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800097e:	2301      	movs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
        break;
 8000982:	e005      	b.n	8000990 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000984:	2302      	movs	r3, #2
 8000986:	607b      	str	r3, [r7, #4]
        break;
 8000988:	e002      	b.n	8000990 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
        break;
 800098e:	bf00      	nop
    }
  }
  return systick_source;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010
 80009a4:	46020c00 	.word	0x46020c00

080009a8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e007      	b.n	80009d6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f023 0204 	bic.w	r2, r3, #4
 80009ce:	4905      	ldr	r1, [pc, #20]	@ (80009e4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40030400 	.word	0x40030400

080009e8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_ICACHE_Enable+0x1c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <HAL_ICACHE_Enable+0x1c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	40030400 	.word	0x40030400

08000a08 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	46020800 	.word	0x46020800

08000a28 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000a30:	4b39      	ldr	r3, [pc, #228]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a38:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d10b      	bne.n	8000a5a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a48:	d905      	bls.n	8000a56 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000a4a:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4a32      	ldr	r2, [pc, #200]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a54:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e057      	b.n	8000b0a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a60:	d90a      	bls.n	8000a78 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a74:	60d3      	str	r3, [r2, #12]
 8000a76:	e007      	b.n	8000a88 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8000a80:	4925      	ldr	r1, [pc, #148]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a24      	ldr	r2, [pc, #144]	@ (8000b20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a92:	099b      	lsrs	r3, r3, #6
 8000a94:	2232      	movs	r2, #50	@ 0x32
 8000a96:	fb02 f303 	mul.w	r3, r2, r3
 8000a9a:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa0:	099b      	lsrs	r3, r3, #6
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000aa6:	e002      	b.n	8000aae <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f3      	bne.n	8000aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d01b      	beq.n	8000afe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000acc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad0:	099b      	lsrs	r3, r3, #6
 8000ad2:	2232      	movs	r2, #50	@ 0x32
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	099b      	lsrs	r3, r3, #6
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000ae4:	e002      	b.n	8000aec <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <HAL_PWREx_ControlVoltageScaling+0xd6>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d1f3      	bne.n	8000ae6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8000b04:	2303      	movs	r3, #3
 8000b06:	e000      	b.n	8000b0a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	46020800 	.word	0x46020800
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	10624dd3 	.word	0x10624dd3

08000b24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8000b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	46020800 	.word	0x46020800

08000b40 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <HAL_PWREx_ConfigSupply+0x94>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	@ (8000bd8 <HAL_PWREx_ConfigSupply+0x98>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	099b      	lsrs	r3, r3, #6
 8000b54:	2232      	movs	r2, #50	@ 0x32
 8000b56:	fb02 f303 	mul.w	r3, r2, r3
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_PWREx_ConfigSupply+0x98>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	099b      	lsrs	r3, r3, #6
 8000b62:	3301      	adds	r3, #1
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d113      	bne.n	8000b94 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a1a      	ldr	r2, [pc, #104]	@ (8000bdc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b72:	f023 0302 	bic.w	r3, r3, #2
 8000b76:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000b78:	e002      	b.n	8000b80 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d116      	bne.n	8000bba <HAL_PWREx_ConfigSupply+0x7a>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f3      	bne.n	8000b7a <HAL_PWREx_ConfigSupply+0x3a>
 8000b92:	e012      	b.n	8000bba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_PWREx_ConfigSupply+0x9c>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000ba0:	e002      	b.n	8000ba8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_PWREx_ConfigSupply+0x9c>)
 8000baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <HAL_PWREx_ConfigSupply+0x7a>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f3      	bne.n	8000ba2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	10624dd3 	.word	0x10624dd3
 8000bdc:	46020800 	.word	0x46020800

08000be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f000 bec8 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bfa:	4b99      	ldr	r3, [pc, #612]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c04:	4b96      	ldr	r3, [pc, #600]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 816c 	beq.w	8000ef4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_RCC_OscConfig+0x52>
 8000c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c24:	2b0c      	cmp	r3, #12
 8000c26:	f040 80de 	bne.w	8000de6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	f040 80da 	bne.w	8000de6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	f000 bea5 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c44:	4b86      	ldr	r3, [pc, #536]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <HAL_RCC_OscConfig+0x7a>
 8000c50:	4b83      	ldr	r3, [pc, #524]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000c58:	e005      	b.n	8000c66 <HAL_RCC_OscConfig+0x86>
 8000c5a:	4b81      	ldr	r3, [pc, #516]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c60:	041b      	lsls	r3, r3, #16
 8000c62:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d255      	bcs.n	8000d16 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10a      	bne.n	8000c86 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 f99d 	bl	8001fb4 <RCC_SetFlashLatencyFromMSIRange>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f000 be82 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000c86:	4b76      	ldr	r3, [pc, #472]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	4a75      	ldr	r2, [pc, #468]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c90:	6093      	str	r3, [r2, #8]
 8000c92:	4b73      	ldr	r3, [pc, #460]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	4970      	ldr	r1, [pc, #448]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000cac:	d309      	bcc.n	8000cc2 <HAL_RCC_OscConfig+0xe2>
 8000cae:	4b6c      	ldr	r3, [pc, #432]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f023 021f 	bic.w	r2, r3, #31
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a1b      	ldr	r3, [r3, #32]
 8000cba:	4969      	ldr	r1, [pc, #420]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60cb      	str	r3, [r1, #12]
 8000cc0:	e07e      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da0a      	bge.n	8000ce0 <HAL_RCC_OscConfig+0x100>
 8000cca:	4b65      	ldr	r3, [pc, #404]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	015b      	lsls	r3, r3, #5
 8000cd8:	4961      	ldr	r1, [pc, #388]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60cb      	str	r3, [r1, #12]
 8000cde:	e06f      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce8:	d30a      	bcc.n	8000d00 <HAL_RCC_OscConfig+0x120>
 8000cea:	4b5d      	ldr	r3, [pc, #372]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4959      	ldr	r1, [pc, #356]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	60cb      	str	r3, [r1, #12]
 8000cfe:	e05f      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
 8000d00:	4b57      	ldr	r3, [pc, #348]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	03db      	lsls	r3, r3, #15
 8000d0e:	4954      	ldr	r1, [pc, #336]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60cb      	str	r3, [r1, #12]
 8000d14:	e054      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000d16:	4b52      	ldr	r3, [pc, #328]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4a51      	ldr	r2, [pc, #324]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d20:	6093      	str	r3, [r2, #8]
 8000d22:	4b4f      	ldr	r3, [pc, #316]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d2e:	494c      	ldr	r1, [pc, #304]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d30:	4313      	orrs	r3, r2
 8000d32:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d38:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000d3c:	d309      	bcc.n	8000d52 <HAL_RCC_OscConfig+0x172>
 8000d3e:	4b48      	ldr	r3, [pc, #288]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f023 021f 	bic.w	r2, r3, #31
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	4945      	ldr	r1, [pc, #276]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60cb      	str	r3, [r1, #12]
 8000d50:	e028      	b.n	8000da4 <HAL_RCC_OscConfig+0x1c4>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da0a      	bge.n	8000d70 <HAL_RCC_OscConfig+0x190>
 8000d5a:	4b41      	ldr	r3, [pc, #260]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	015b      	lsls	r3, r3, #5
 8000d68:	493d      	ldr	r1, [pc, #244]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60cb      	str	r3, [r1, #12]
 8000d6e:	e019      	b.n	8000da4 <HAL_RCC_OscConfig+0x1c4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d78:	d30a      	bcc.n	8000d90 <HAL_RCC_OscConfig+0x1b0>
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	4935      	ldr	r1, [pc, #212]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60cb      	str	r3, [r1, #12]
 8000d8e:	e009      	b.n	8000da4 <HAL_RCC_OscConfig+0x1c4>
 8000d90:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	03db      	lsls	r3, r3, #15
 8000d9e:	4930      	ldr	r1, [pc, #192]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10a      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 f900 	bl	8001fb4 <RCC_SetFlashLatencyFromMSIRange>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f000 bde5 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8000dc0:	f001 f8de 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <HAL_RCC_OscConfig+0x284>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fbef 	bl	80005ac <HAL_InitTick>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8000dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 808a 	beq.w	8000ef2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8000dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000de2:	f000 bdd2 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d066      	beq.n	8000ebc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000dfa:	f7ff fc61 	bl	80006c0 <HAL_GetTick>
 8000dfe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000e00:	e009      	b.n	8000e16 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e02:	f7ff fc5d 	bl	80006c0 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d902      	bls.n	8000e16 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	f000 bdba 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0ef      	beq.n	8000e02 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e2c:	6093      	str	r3, [r2, #8]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3a:	4909      	ldr	r1, [pc, #36]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e48:	d30e      	bcc.n	8000e68 <HAL_RCC_OscConfig+0x288>
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	f023 021f 	bic.w	r2, r3, #31
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4902      	ldr	r1, [pc, #8]	@ (8000e60 <HAL_RCC_OscConfig+0x280>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
 8000e5c:	e04a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x314>
 8000e5e:	bf00      	nop
 8000e60:	46020c00 	.word	0x46020c00
 8000e64:	20000004 	.word	0x20000004
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da0a      	bge.n	8000e86 <HAL_RCC_OscConfig+0x2a6>
 8000e70:	4b98      	ldr	r3, [pc, #608]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	015b      	lsls	r3, r3, #5
 8000e7e:	4995      	ldr	r1, [pc, #596]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60cb      	str	r3, [r1, #12]
 8000e84:	e036      	b.n	8000ef4 <HAL_RCC_OscConfig+0x314>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e8e:	d30a      	bcc.n	8000ea6 <HAL_RCC_OscConfig+0x2c6>
 8000e90:	4b90      	ldr	r3, [pc, #576]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	498d      	ldr	r1, [pc, #564]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60cb      	str	r3, [r1, #12]
 8000ea4:	e026      	b.n	8000ef4 <HAL_RCC_OscConfig+0x314>
 8000ea6:	4b8b      	ldr	r3, [pc, #556]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	03db      	lsls	r3, r3, #15
 8000eb4:	4987      	ldr	r1, [pc, #540]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60cb      	str	r3, [r1, #12]
 8000eba:	e01b      	b.n	8000ef4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8000ebc:	4b85      	ldr	r3, [pc, #532]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a84      	ldr	r2, [pc, #528]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	f023 0301 	bic.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbfa 	bl	80006c0 <HAL_GetTick>
 8000ecc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000ece:	e009      	b.n	8000ee4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fbf6 	bl	80006c0 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d902      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f000 bd53 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8000ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1ef      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2f0>
 8000ef0:	e000      	b.n	8000ef4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000ef2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 808b 	beq.w	8001018 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_OscConfig+0x334>
 8000f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d109      	bne.n	8000f22 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d106      	bne.n	8000f22 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d17d      	bne.n	8001018 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f000 bd34 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f2a:	d106      	bne.n	8000f3a <HAL_RCC_OscConfig+0x35a>
 8000f2c:	4b69      	ldr	r3, [pc, #420]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a68      	ldr	r2, [pc, #416]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e041      	b.n	8000fbe <HAL_RCC_OscConfig+0x3de>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f42:	d112      	bne.n	8000f6a <HAL_RCC_OscConfig+0x38a>
 8000f44:	4b63      	ldr	r3, [pc, #396]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a62      	ldr	r2, [pc, #392]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b60      	ldr	r3, [pc, #384]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5f      	ldr	r2, [pc, #380]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e029      	b.n	8000fbe <HAL_RCC_OscConfig+0x3de>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8000f72:	d112      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3ba>
 8000f74:	4b57      	ldr	r3, [pc, #348]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a56      	ldr	r2, [pc, #344]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b54      	ldr	r3, [pc, #336]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a53      	ldr	r2, [pc, #332]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b51      	ldr	r3, [pc, #324]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a50      	ldr	r2, [pc, #320]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e011      	b.n	8000fbe <HAL_RCC_OscConfig+0x3de>
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a4a      	ldr	r2, [pc, #296]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b48      	ldr	r3, [pc, #288]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a47      	ldr	r2, [pc, #284]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fb8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d014      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb7b 	bl	80006c0 <HAL_GetTick>
 8000fca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fcc:	e009      	b.n	8000fe2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fce:	f7ff fb77 	bl	80006c0 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b64      	cmp	r3, #100	@ 0x64
 8000fda:	d902      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f000 bcd4 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0ef      	beq.n	8000fce <HAL_RCC_OscConfig+0x3ee>
 8000fee:	e013      	b.n	8001018 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fb66 	bl	80006c0 <HAL_GetTick>
 8000ff4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff6:	e009      	b.n	800100c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fb62 	bl	80006c0 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	@ 0x64
 8001004:	d902      	bls.n	800100c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	f000 bcbf 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800100c:	4b31      	ldr	r3, [pc, #196]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1ef      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d05f      	beq.n	80010e4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001026:	2b04      	cmp	r3, #4
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x456>
 800102a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d114      	bne.n	800105a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001032:	2b02      	cmp	r3, #2
 8001034:	d111      	bne.n	800105a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f000 bca3 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001044:	4b23      	ldr	r3, [pc, #140]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	4920      	ldr	r1, [pc, #128]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001054:	4313      	orrs	r3, r2
 8001056:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001058:	e044      	b.n	80010e4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d024      	beq.n	80010ac <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800106e:	f7ff fb27 	bl	80006c0 <HAL_GetTick>
 8001072:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001074:	e009      	b.n	800108a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001076:	f7ff fb23 	bl	80006c0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d902      	bls.n	800108a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	f000 bc80 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0ef      	beq.n	8001076 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	490b      	ldr	r1, [pc, #44]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	610b      	str	r3, [r1, #16]
 80010aa:	e01b      	b.n	80010e4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80010b8:	f7ff fb02 	bl	80006c0 <HAL_GetTick>
 80010bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010be:	e00b      	b.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fafe 	bl	80006c0 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d904      	bls.n	80010d8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f000 bc5b 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
 80010d4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d8:	4baf      	ldr	r3, [pc, #700]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ed      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80c8 	beq.w	8001282 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f8:	4ba7      	ldr	r3, [pc, #668]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80010fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	d111      	bne.n	800112a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4ba4      	ldr	r3, [pc, #656]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800110c:	4aa2      	ldr	r2, [pc, #648]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001116:	4ba0      	ldr	r3, [pc, #640]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800112a:	4b9c      	ldr	r3, [pc, #624]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d119      	bne.n	800116a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001136:	4b99      	ldr	r3, [pc, #612]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	4a98      	ldr	r2, [pc, #608]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001142:	f7ff fabd 	bl	80006c0 <HAL_GetTick>
 8001146:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001148:	e009      	b.n	800115e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114a:	f7ff fab9 	bl	80006c0 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d902      	bls.n	800115e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	f000 bc16 	b.w	800198a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800115e:	4b8f      	ldr	r3, [pc, #572]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 8001160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0ef      	beq.n	800114a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d05f      	beq.n	8001232 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001172:	4b89      	ldr	r3, [pc, #548]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001178:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699a      	ldr	r2, [r3, #24]
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001184:	429a      	cmp	r2, r3
 8001186:	d037      	beq.n	80011f8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e3f4      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d01b      	beq.n	80011e2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80011aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80011ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b0:	4a79      	ldr	r2, [pc, #484]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80011b2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80011b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80011ba:	f7ff fa81 	bl	80006c0 <HAL_GetTick>
 80011be:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c2:	f7ff fa7d 	bl	80006c0 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e3da      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80011d4:	4b70      	ldr	r3, [pc, #448]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80011d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ef      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80011e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80011e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4969      	ldr	r1, [pc, #420]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80011f8:	4b67      	ldr	r3, [pc, #412]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80011fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011fe:	4a66      	ldr	r2, [pc, #408]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001200:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001204:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001208:	f7ff fa5a 	bl	80006c0 <HAL_GetTick>
 800120c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001210:	f7ff fa56 	bl	80006c0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b05      	cmp	r3, #5
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e3b3      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0ef      	beq.n	8001210 <HAL_RCC_OscConfig+0x630>
 8001230:	e01b      	b.n	800126a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001232:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001238:	4a57      	ldr	r2, [pc, #348]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 800123a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800123e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001242:	f7ff fa3d 	bl	80006c0 <HAL_GetTick>
 8001246:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124a:	f7ff fa39 	bl	80006c0 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b05      	cmp	r3, #5
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e396      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800125c:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 800125e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1ef      	bne.n	800124a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800126a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001278:	4a47      	ldr	r2, [pc, #284]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 800127a:	f023 0304 	bic.w	r3, r3, #4
 800127e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8111 	beq.w	80014b2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001296:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d111      	bne.n	80012c8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80012b4:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 80012b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012c8:	4b34      	ldr	r3, [pc, #208]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d118      	bne.n	8001306 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80012d4:	4b31      	ldr	r3, [pc, #196]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	4a30      	ldr	r2, [pc, #192]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e0:	f7ff f9ee 	bl	80006c0 <HAL_GetTick>
 80012e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e8:	f7ff f9ea 	bl	80006c0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e347      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80012fa:	4b28      	ldr	r3, [pc, #160]	@ (800139c <HAL_RCC_OscConfig+0x7bc>)
 80012fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01f      	beq.n	8001352 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d010      	beq.n	8001340 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001324:	4a1c      	ldr	r2, [pc, #112]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001334:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800133e:	e018      	b.n	8001372 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001346:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001350:	e00f      	b.n	8001372 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001358:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 800135a:	f023 0301 	bic.w	r3, r3, #1
 800135e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 8001364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001368:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <HAL_RCC_OscConfig+0x7b8>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d057      	beq.n	800142a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800137a:	f7ff f9a1 	bl	80006c0 <HAL_GetTick>
 800137e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001380:	e00e      	b.n	80013a0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001382:	f7ff f99d 	bl	80006c0 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001390:	4293      	cmp	r3, r2
 8001392:	d905      	bls.n	80013a0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e2f8      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
 8001398:	46020c00 	.word	0x46020c00
 800139c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80013a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0e9      	beq.n	8001382 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013ba:	4b96      	ldr	r3, [pc, #600]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80013bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013c0:	4a94      	ldr	r2, [pc, #592]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80013c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff f978 	bl	80006c0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e2d3      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013e2:	4b8c      	ldr	r3, [pc, #560]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80013e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ed      	beq.n	80013cc <HAL_RCC_OscConfig+0x7ec>
 80013f0:	e053      	b.n	800149a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013f2:	4b88      	ldr	r3, [pc, #544]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80013f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013f8:	4a86      	ldr	r2, [pc, #536]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80013fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001404:	f7ff f95c 	bl	80006c0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e2b7      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800141a:	4b7e      	ldr	r3, [pc, #504]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800141c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ed      	bne.n	8001404 <HAL_RCC_OscConfig+0x824>
 8001428:	e037      	b.n	800149a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800142a:	f7ff f949 	bl	80006c0 <HAL_GetTick>
 800142e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001432:	f7ff f945 	bl	80006c0 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001440:	4293      	cmp	r3, r2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e2a0      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001448:	4b72      	ldr	r3, [pc, #456]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800144a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1ed      	bne.n	8001432 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001456:	4b6f      	ldr	r3, [pc, #444]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001458:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800145c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01a      	beq.n	800149a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001464:	4b6b      	ldr	r3, [pc, #428]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800146a:	4a6a      	ldr	r2, [pc, #424]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800146c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001470:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001474:	e00a      	b.n	800148c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7ff f923 	bl	80006c0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001484:	4293      	cmp	r3, r2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e27e      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800148c:	4b61      	ldr	r3, [pc, #388]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800148e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ed      	bne.n	8001476 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800149a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80014a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014a8:	4a5a      	ldr	r2, [pc, #360]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d036      	beq.n	800152c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d019      	beq.n	80014fa <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80014c6:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a52      	ldr	r2, [pc, #328]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80014cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80014d2:	f7ff f8f5 	bl	80006c0 <HAL_GetTick>
 80014d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014da:	f7ff f8f1 	bl	80006c0 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e24e      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80014ec:	4b49      	ldr	r3, [pc, #292]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x8fa>
 80014f8:	e018      	b.n	800152c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80014fa:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a45      	ldr	r2, [pc, #276]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001504:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001506:	f7ff f8db 	bl	80006c0 <HAL_GetTick>
 800150a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150e:	f7ff f8d7 	bl	80006c0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e234      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001520:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001534:	2b00      	cmp	r3, #0
 8001536:	d036      	beq.n	80015a6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	2b00      	cmp	r3, #0
 800153e:	d019      	beq.n	8001574 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a33      	ldr	r2, [pc, #204]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800154c:	f7ff f8b8 	bl	80006c0 <HAL_GetTick>
 8001550:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001554:	f7ff f8b4 	bl	80006c0 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e211      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001566:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x974>
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a26      	ldr	r2, [pc, #152]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800157a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800157e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001580:	f7ff f89e 	bl	80006c0 <HAL_GetTick>
 8001584:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001588:	f7ff f89a 	bl	80006c0 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1f7      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d07f      	beq.n	80016b2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d062      	beq.n	8001680 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80015c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015c4:	6093      	str	r3, [r2, #8]
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d2:	4910      	ldr	r1, [pc, #64]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80015e0:	d309      	bcc.n	80015f6 <HAL_RCC_OscConfig+0xa16>
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f023 021f 	bic.w	r2, r3, #31
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4909      	ldr	r1, [pc, #36]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
 80015f4:	e02a      	b.n	800164c <HAL_RCC_OscConfig+0xa6c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	da0c      	bge.n	8001618 <HAL_RCC_OscConfig+0xa38>
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	015b      	lsls	r3, r3, #5
 800160c:	4901      	ldr	r1, [pc, #4]	@ (8001614 <HAL_RCC_OscConfig+0xa34>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60cb      	str	r3, [r1, #12]
 8001612:	e01b      	b.n	800164c <HAL_RCC_OscConfig+0xa6c>
 8001614:	46020c00 	.word	0x46020c00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001620:	d30a      	bcc.n	8001638 <HAL_RCC_OscConfig+0xa58>
 8001622:	4ba1      	ldr	r3, [pc, #644]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	499d      	ldr	r1, [pc, #628]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001632:	4313      	orrs	r3, r2
 8001634:	60cb      	str	r3, [r1, #12]
 8001636:	e009      	b.n	800164c <HAL_RCC_OscConfig+0xa6c>
 8001638:	4b9b      	ldr	r3, [pc, #620]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	03db      	lsls	r3, r3, #15
 8001646:	4998      	ldr	r1, [pc, #608]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800164c:	4b96      	ldr	r3, [pc, #600]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a95      	ldr	r2, [pc, #596]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001658:	f7ff f832 	bl	80006c0 <HAL_GetTick>
 800165c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001660:	f7ff f82e 	bl	80006c0 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e18b      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001672:	4b8d      	ldr	r3, [pc, #564]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xa80>
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001680:	4b89      	ldr	r3, [pc, #548]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a88      	ldr	r2, [pc, #544]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001686:	f023 0310 	bic.w	r3, r3, #16
 800168a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800168c:	f7ff f818 	bl	80006c0 <HAL_GetTick>
 8001690:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001694:	f7ff f814 	bl	80006c0 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e171      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80016a6:	4b80      	ldr	r3, [pc, #512]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8166 	beq.w	8001988 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c2:	4b79      	ldr	r3, [pc, #484]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	f000 80f2 	beq.w	80018b4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	f040 80c5 	bne.w	8001864 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b73      	ldr	r3, [pc, #460]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a72      	ldr	r2, [pc, #456]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80016e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80016e6:	f7fe ffeb 	bl	80006c0 <HAL_GetTick>
 80016ea:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7fe ffe7 	bl	80006c0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e144      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001700:	4b69      	ldr	r3, [pc, #420]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170c:	4b66      	ldr	r3, [pc, #408]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800170e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b00      	cmp	r3, #0
 8001718:	d111      	bne.n	800173e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b63      	ldr	r3, [pc, #396]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800171c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001720:	4a61      	ldr	r2, [pc, #388]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800172a:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800172c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800173e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ac <HAL_RCC_OscConfig+0xccc>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001746:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001752:	4b56      	ldr	r3, [pc, #344]	@ (80018ac <HAL_RCC_OscConfig+0xccc>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4a55      	ldr	r2, [pc, #340]	@ (80018ac <HAL_RCC_OscConfig+0xccc>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800175e:	4b52      	ldr	r3, [pc, #328]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001772:	3a01      	subs	r2, #1
 8001774:	0212      	lsls	r2, r2, #8
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800177c:	430a      	orrs	r2, r1
 800177e:	494a      	ldr	r1, [pc, #296]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001780:	4313      	orrs	r3, r2
 8001782:	628b      	str	r3, [r1, #40]	@ 0x28
 8001784:	4b48      	ldr	r3, [pc, #288]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001788:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <HAL_RCC_OscConfig+0xcd0>)
 800178a:	4013      	ands	r3, r2
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001790:	3a01      	subs	r2, #1
 8001792:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800179a:	3a01      	subs	r2, #1
 800179c:	0252      	lsls	r2, r2, #9
 800179e:	b292      	uxth	r2, r2
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017a6:	3a01      	subs	r2, #1
 80017a8:	0412      	lsls	r2, r2, #16
 80017aa:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80017b4:	3a01      	subs	r2, #1
 80017b6:	0612      	lsls	r2, r2, #24
 80017b8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80017bc:	430a      	orrs	r2, r1
 80017be:	493a      	ldr	r1, [pc, #232]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80017c4:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	4a37      	ldr	r2, [pc, #220]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017ca:	f023 0310 	bic.w	r3, r3, #16
 80017ce:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d4:	4a34      	ldr	r2, [pc, #208]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80017da:	4b33      	ldr	r3, [pc, #204]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017de:	4a32      	ldr	r2, [pc, #200]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017e0:	f043 0310 	orr.w	r3, r3, #16
 80017e4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80017e6:	4b30      	ldr	r3, [pc, #192]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	f023 020c 	bic.w	r2, r3, #12
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	492d      	ldr	r1, [pc, #180]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80017f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001800:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_RCC_OscConfig+0xccc>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a29      	ldr	r2, [pc, #164]	@ (80018ac <HAL_RCC_OscConfig+0xccc>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800180c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181a:	4a23      	ldr	r2, [pc, #140]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1f      	ldr	r2, [pc, #124]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001830:	f7fe ff46 	bl	80006c0 <HAL_GetTick>
 8001834:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7fe ff42 	bl	80006c0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e09f      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	4a13      	ldr	r2, [pc, #76]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001860:	6293      	str	r3, [r2, #40]	@ 0x28
 8001862:	e091      	b.n	8001988 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0f      	ldr	r2, [pc, #60]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800186a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001870:	f7fe ff26 	bl	80006c0 <HAL_GetTick>
 8001874:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7fe ff22 	bl	80006c0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e07f      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	4a03      	ldr	r2, [pc, #12]	@ (80018a8 <HAL_RCC_OscConfig+0xcc8>)
 800189c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80018a0:	f023 0303 	bic.w	r3, r3, #3
 80018a4:	6293      	str	r3, [r2, #40]	@ 0x28
 80018a6:	e06f      	b.n	8001988 <HAL_RCC_OscConfig+0xda8>
 80018a8:	46020c00 	.word	0x46020c00
 80018ac:	46020800 	.word	0x46020800
 80018b0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80018b4:	4b37      	ldr	r3, [pc, #220]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018ba:	4b36      	ldr	r3, [pc, #216]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d039      	beq.n	800193c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0203 	and.w	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d132      	bne.n	800193c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d129      	bne.n	800193c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d122      	bne.n	800193c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001900:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	0a5b      	lsrs	r3, r3, #9
 800190a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001912:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d111      	bne.n	800193c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001924:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d108      	bne.n	800193c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	0e1b      	lsrs	r3, r3, #24
 800192e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001936:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e024      	b.n	800198a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 8001942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800194e:	429a      	cmp	r2, r3
 8001950:	d01a      	beq.n	8001988 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 8001958:	f023 0310 	bic.w	r3, r3, #16
 800195c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7fe feaf 	bl	80006c0 <HAL_GetTick>
 8001962:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001964:	bf00      	nop
 8001966:	f7fe feab 	bl	80006c0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196e:	4293      	cmp	r3, r2
 8001970:	d0f9      	beq.n	8001966 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001976:	4a07      	ldr	r2, [pc, #28]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <HAL_RCC_OscConfig+0xdb4>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3738      	adds	r7, #56	@ 0x38
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	46020c00 	.word	0x46020c00

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e1d9      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b9b      	ldr	r3, [pc, #620]	@ (8001c1c <HAL_RCC_ClockConfig+0x284>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b98      	ldr	r3, [pc, #608]	@ (8001c1c <HAL_RCC_ClockConfig+0x284>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 020f 	bic.w	r2, r3, #15
 80019c2:	4996      	ldr	r1, [pc, #600]	@ (8001c1c <HAL_RCC_ClockConfig+0x284>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b94      	ldr	r3, [pc, #592]	@ (8001c1c <HAL_RCC_ClockConfig+0x284>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e1c1      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d908      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80019f8:	4b89      	ldr	r3, [pc, #548]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	4986      	ldr	r1, [pc, #536]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691a      	ldr	r2, [r3, #16]
 8001a1a:	4b81      	ldr	r3, [pc, #516]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d909      	bls.n	8001a3c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001a28:	4b7d      	ldr	r3, [pc, #500]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	497a      	ldr	r1, [pc, #488]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d010      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4b74      	ldr	r3, [pc, #464]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d908      	bls.n	8001a6a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b71      	ldr	r3, [pc, #452]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	496e      	ldr	r1, [pc, #440]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d010      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4b69      	ldr	r3, [pc, #420]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d908      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001a86:	4b66      	ldr	r3, [pc, #408]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f023 020f 	bic.w	r2, r3, #15
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4963      	ldr	r1, [pc, #396]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80d2 	beq.w	8001c4a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d143      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d110      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac6:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ad0:	4b53      	ldr	r3, [pc, #332]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001ae2:	f7fe fded 	bl	80006c0 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001ae8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c24 <HAL_RCC_ClockConfig+0x28c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00f      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001af6:	f7fe fde3 	bl	80006c0 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e12b      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001b08:	4b46      	ldr	r3, [pc, #280]	@ (8001c24 <HAL_RCC_ClockConfig+0x28c>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b20:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d121      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e112      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e106      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001b5a:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0fa      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0f2      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4926      	ldr	r1, [pc, #152]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001b8c:	f7fe fd98 	bl	80006c0 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d112      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe fd90 	bl	80006c0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0d6      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d1ee      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x204>
 8001bbe:	e044      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d112      	bne.n	8001bee <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7fe fd79 	bl	80006c0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0bf      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d1ee      	bne.n	8001bca <HAL_RCC_ClockConfig+0x232>
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d123      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7fe fd62 	bl	80006c0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0a8      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c0e:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <HAL_RCC_ClockConfig+0x288>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x260>
 8001c1a:	e016      	b.n	8001c4a <HAL_RCC_ClockConfig+0x2b2>
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	46020c00 	.word	0x46020c00
 8001c24:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7fe fd4a 	bl	80006c0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e090      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b43      	ldr	r3, [pc, #268]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d208      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001c66:	4b40      	ldr	r3, [pc, #256]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	f023 020f 	bic.w	r2, r3, #15
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	493d      	ldr	r1, [pc, #244]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c78:	4b3c      	ldr	r3, [pc, #240]	@ (8001d6c <HAL_RCC_ClockConfig+0x3d4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d210      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <HAL_RCC_ClockConfig+0x3d4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 020f 	bic.w	r2, r3, #15
 8001c8e:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_RCC_ClockConfig+0x3d4>)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c96:	4b35      	ldr	r3, [pc, #212]	@ (8001d6c <HAL_RCC_ClockConfig+0x3d4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e05b      	b.n	8001d60 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d010      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d208      	bcs.n	8001cd6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	4b28      	ldr	r3, [pc, #160]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4925      	ldr	r1, [pc, #148]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d012      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d209      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4919      	ldr	r1, [pc, #100]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d208      	bcs.n	8001d36 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	490d      	ldr	r1, [pc, #52]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_RCC_ClockConfig+0x3d0>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	490a      	ldr	r1, [pc, #40]	@ (8001d70 <HAL_RCC_ClockConfig+0x3d8>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4c:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_RCC_ClockConfig+0x3dc>)
 8001d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x3e0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fc29 	bl	80005ac <HAL_InitTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	46020c00 	.word	0x46020c00
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	080021a0 	.word	0x080021a0
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b08b      	sub	sp, #44	@ 0x2c
 8001d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8a:	4b78      	ldr	r3, [pc, #480]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d94:	4b75      	ldr	r3, [pc, #468]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d11e      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001db0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc2:	0b1b      	lsrs	r3, r3, #12
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001dcc:	4b67      	ldr	r3, [pc, #412]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	0f1b      	lsrs	r3, r3, #28
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dd8:	4a65      	ldr	r2, [pc, #404]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d110      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dec:	e00d      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dee:	4b5f      	ldr	r3, [pc, #380]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001dfc:	623b      	str	r3, [r7, #32]
 8001dfe:	e004      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e06:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001e08:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	f040 80a5 	bne.w	8001f5c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001e12:	4b56      	ldr	r3, [pc, #344]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001e1c:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001e2a:	4b50      	ldr	r3, [pc, #320]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e36:	4b4d      	ldr	r3, [pc, #308]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	08db      	lsrs	r3, r3, #3
 8001e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d003      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0xe4>
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d022      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x128>
 8001e5e:	e043      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8001f78 <HAL_RCC_GetSysClockFreq+0x1fc>
 8001e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e72:	4b3e      	ldr	r3, [pc, #248]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001e82:	ed97 6a01 	vldr	s12, [r7, #4]
 8001e86:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x200>
 8001e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ea2:	e046      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eae:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001f78 <HAL_RCC_GetSysClockFreq+0x1fc>
 8001eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001ec6:	ed97 6a01 	vldr	s12, [r7, #4]
 8001eca:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x200>
 8001ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ee6:	e024      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	ee07 3a90 	vmov	s15, r3
 8001f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f10:	ed97 6a01 	vldr	s12, [r7, #4]
 8001f14:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8001f7c <HAL_RCC_GetSysClockFreq+0x200>
 8001f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f30:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f36:	0e1b      	lsrs	r3, r3, #24
 8001f38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f56:	ee17 3a90 	vmov	r3, s15
 8001f5a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	372c      	adds	r7, #44	@ 0x2c
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	46020c00 	.word	0x46020c00
 8001f70:	080021b0 	.word	0x080021b0
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	4b742400 	.word	0x4b742400
 8001f7c:	46000000 	.word	0x46000000

08001f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f84:	f7ff fefa 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <HAL_RCC_GetHCLKFreq+0x28>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4906      	ldr	r1, [pc, #24]	@ (8001fac <HAL_RCC_GetHCLKFreq+0x2c>)
 8001f94:	5ccb      	ldrb	r3, [r1, r3]
 8001f96:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9a:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f9c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x30>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	46020c00 	.word	0x46020c00
 8001fac:	080021a0 	.word	0x080021a0
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fca:	f7fe fdab 	bl	8000b24 <HAL_PWREx_GetVoltageRange>
 8001fce:	6178      	str	r0, [r7, #20]
 8001fd0:	e019      	b.n	8002006 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd8:	4a37      	ldr	r2, [pc, #220]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001fe2:	4b35      	ldr	r3, [pc, #212]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ff0:	f7fe fd98 	bl	8000b24 <HAL_PWREx_GetVoltageRange>
 8001ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ff6:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80020b8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8001ffe:	f023 0304 	bic.w	r3, r3, #4
 8002002:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800200c:	d003      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002014:	d109      	bne.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800201c:	d202      	bcs.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800201e:	2301      	movs	r3, #1
 8002020:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002022:	e033      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002028:	e030      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002030:	d208      	bcs.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002038:	d102      	bne.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800203a:	2303      	movs	r3, #3
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e025      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e035      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800204a:	d90f      	bls.n	800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002058:	d902      	bls.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	e015      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e012      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	e00f      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002072:	d109      	bne.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800207c:	2301      	movs	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002082:	2302      	movs	r3, #2
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e001      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 020f 	bic.w	r2, r3, #15
 8002094:	4909      	ldr	r1, [pc, #36]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	46020c00 	.word	0x46020c00
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_EnableMSIPLLModeSelection>:
  *            @arg @ref RCC_MSISPLL_MODE_SEL  PLL mode applied to MSIS (MSI system) clock output
  *            @arg @ref RCC_MSIKPLL_MODE_SEL  PLL mode applied to MSIK (MSI kernel) clock output
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnableMSIPLLModeSelection(uint32_t MSIPLLModeSelection)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_RCC_MSIPLLMODE_SELECT(MSIPLLModeSelection));
  if (READ_BIT(RCC->CR, RCC_CR_MSIPLLEN) == 0U)
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <HAL_RCCEx_EnableMSIPLLModeSelection+0x4c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d111      	bne.n	80020fc <HAL_RCCEx_EnableMSIPLLModeSelection+0x3c>
  {
    /* This bit is used only if PLL mode is disabled (MSIPLLEN = 0) */
    if (MSIPLLModeSelection == RCC_MSISPLL_MODE_SEL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b40      	cmp	r3, #64	@ 0x40
 80020dc:	d106      	bne.n	80020ec <HAL_RCCEx_EnableMSIPLLModeSelection+0x2c>
    {
      SET_BIT(RCC->CR, RCC_CR_MSIPLLSEL);
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_RCCEx_EnableMSIPLLModeSelection+0x4c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <HAL_RCCEx_EnableMSIPLLModeSelection+0x4c>)
 80020e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e005      	b.n	80020f8 <HAL_RCCEx_EnableMSIPLLModeSelection+0x38>
    }
    else
    {
      CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLSEL);
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_RCCEx_EnableMSIPLLModeSelection+0x4c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a06      	ldr	r2, [pc, #24]	@ (800210c <HAL_RCCEx_EnableMSIPLLModeSelection+0x4c>)
 80020f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020f6:	6013      	str	r3, [r2, #0]
    }
    status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	46020c00 	.word	0x46020c00

08002110 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6013      	str	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	46020c00 	.word	0x46020c00

08002130 <memset>:
 8002130:	4402      	add	r2, r0
 8002132:	4603      	mov	r3, r0
 8002134:	4293      	cmp	r3, r2
 8002136:	d100      	bne.n	800213a <memset+0xa>
 8002138:	4770      	bx	lr
 800213a:	f803 1b01 	strb.w	r1, [r3], #1
 800213e:	e7f9      	b.n	8002134 <memset+0x4>

08002140 <__libc_init_array>:
 8002140:	b570      	push	{r4, r5, r6, lr}
 8002142:	4d0d      	ldr	r5, [pc, #52]	@ (8002178 <__libc_init_array+0x38>)
 8002144:	2600      	movs	r6, #0
 8002146:	4c0d      	ldr	r4, [pc, #52]	@ (800217c <__libc_init_array+0x3c>)
 8002148:	1b64      	subs	r4, r4, r5
 800214a:	10a4      	asrs	r4, r4, #2
 800214c:	42a6      	cmp	r6, r4
 800214e:	d109      	bne.n	8002164 <__libc_init_array+0x24>
 8002150:	4d0b      	ldr	r5, [pc, #44]	@ (8002180 <__libc_init_array+0x40>)
 8002152:	2600      	movs	r6, #0
 8002154:	4c0b      	ldr	r4, [pc, #44]	@ (8002184 <__libc_init_array+0x44>)
 8002156:	f000 f817 	bl	8002188 <_init>
 800215a:	1b64      	subs	r4, r4, r5
 800215c:	10a4      	asrs	r4, r4, #2
 800215e:	42a6      	cmp	r6, r4
 8002160:	d105      	bne.n	800216e <__libc_init_array+0x2e>
 8002162:	bd70      	pop	{r4, r5, r6, pc}
 8002164:	f855 3b04 	ldr.w	r3, [r5], #4
 8002168:	3601      	adds	r6, #1
 800216a:	4798      	blx	r3
 800216c:	e7ee      	b.n	800214c <__libc_init_array+0xc>
 800216e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002172:	3601      	adds	r6, #1
 8002174:	4798      	blx	r3
 8002176:	e7f2      	b.n	800215e <__libc_init_array+0x1e>
 8002178:	080021f0 	.word	0x080021f0
 800217c:	080021f0 	.word	0x080021f0
 8002180:	080021f0 	.word	0x080021f0
 8002184:	080021f4 	.word	0x080021f4

08002188 <_init>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr

08002194 <_fini>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	bf00      	nop
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr
